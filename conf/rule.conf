# 规则等级: 重要规则-5分   一般规则-2分    不重要-1分

[rule01]
name        = big_table_by_size
summary     = 超过指定规模且没有分区的表
description = 表的规模过大，将影响表的访问效率、增加维护成本等。常见的解决方案就是使用分区表，将大表转换为分区表。对于大表的访问，可采取分片方式处理。
parm1       = 10
pdesc1      = 表大小(GB)
weight      = 1
max_value   = 10
status      = ON
title1      = 表名称
title2      = 表大小(GB)

[rule02]
name        = big_schema_by_table_num
summary     = 单库数据表过多
description = 单库数据表过多，将影响整体性能。必要时，进行业务逻辑的垂直拆分。
parm1       = 5000
pdesc1      = 表个数
weight      = 1
max_value   = 1
status      = ON
title1      = 库名称
title2      = 数据表个数

[rule03]
name        = big_table_by_row_num
summary     = 单表(分区)数据量过大
description = 单表(分区)数据表过多，将影响整体性能。必要时，进行分库、分表或定期清理、归档数据。
parm1       = 20000000
pdesc1      = 数据量规模
weight      = 1
max_value   = 10
status      = ON
title1      = 表(分区)名称
title2      = 记录数

[rule04]
name        = big_table_by_index_num
summary     = 单表索引数量过多
description = 单表索引数量过多，不仅维护成本高，而且占用更多的空间。
parm1       = 7
pdesc1      = 索引数量
weight      = 2
max_value   = 10
status      = ON
title1      = 表名称
title2      = 索引数量

[rule05]
name        = table_exist_foreign_key
summary     = 单表存在外键
description = 外键资源将消耗数据库的计算能力，建议通过应用层保证数据约束。
weight      = 5
max_value   = 20
status      = ON
title1      = 表名称
title2      = 外键名

[rule06]
name        = exist_func_proc_trigger
summary     = 单表存在函数、存储过程、触发器
description = 存储过程、函数、触发器等都将消耗数据库的计算能力，建议通过应用层保证数据约束。
weight      = 5
max_value   = 20
status      = ON
title1      = 类别
title2      = 对象名
title3      = 依赖表

[rule07]
name        = index_selectivity
summary     = 索引选择率不高
description = 索引选择率不高，将导致索引低效，请调整索引字段。
parm1       = 0.001
pdesc1      = 选择率百分比<br>(接近100最好)
weight      = 1
max_value   = 10
status      = ON
title1      = 表名
title2      = 索引名
title3      = 索引唯一值数量
title4      = 表记录数
title5      = 索引选择率(~100%，越高越好)

[rule08]
name        = exist_lob_column
summary     = 存在大对象字段
description = 大对象字段将影响存取性能、耗费较多空间，建议在数据库之外存储。
weight      = 2
max_value   = 6
status      = ON
title1      = 表名
title2      = 字段名
title3      = 数据类型

[rule09]
name        = table_column_num
summary     = 单表字段数过多
description = 表字段数过多，将造成记录过长，单页存储记录数减少。可考虑拆表处理。
parm1       = 40
pdesc1      = 字段数
weight      = 1
max_value   = 10
status      = ON
title1      = 表名
title2      = 字段数

[rule10]
name        = table_record_length
summary     = 单表字段定义长度过长
description = 应控制单表定义长度，避免过长记录。
parm1       = 1000
pdesc1      = 字段长度(字节)
weight      = 2
max_value   = 20
status      = ON
title1      = 表名
title2      = 字段内容平均长度<br>(取自avg_row_length，有失真情况)
title3      = 字段定义长度

[rule11]
name        = table_primarykey_length
summary     = 单表主键字段定义长度过长
description = 应控制主键字段长度，过长的主键字段会造成索引空间消耗过大。
parm1       = 16
pdesc1      = 字段长度(字节)
weight      = 2
max_value   = 20
status      = ON
title1      = 表名
title2      = 主键字段<br>(如果有多个字段，逗号分开)
title3      = 字段类型<br>(如果有多个字段，逗号分开)
title4      = 字段总长度(字节)

[rule12]
name        = table_no_def_primarykey
summary     = 表没有定义主键
description = 没有定义主键，MySQL会自动创建主键。这不是一种好的设计方法。
weight      = 5
max_value   = 20
status      = ON
title1      = 表名

[rule13]
name        = table_without_timestamp
summary     = 表没有定义时间戳字段
description = 时间戳字段是获取增量数据的最佳方法，请为表定义时间戳字段。
weight      = 2
max_value   = 10
status      = ON
title1      = 表名

[rule14]
name        = column_wrong_type
summary     = 字段数据类型定义错误
description = 根据字段保存内容判断，字段类型定义异常，建议选择适合的数据类型。
parm1       = 10000
pdesc1      = 提取做正则判断记录数上限
weight      = 2
max_value   = 20
status      = ON
title1      = 表名
title2      = 字段名
title3      = 字段定义类型
title4      = 字段实际类型